{"ast":null,"code":"import _regeneratorRuntime from\"/Users/rachel/meetup/meetup/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/rachel/meetup/meetup/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{mockEvents}from'./mock-events';import axios from'axios';function getSuggestions(_x){return _getSuggestions.apply(this,arguments);}function _getSuggestions(){_getSuggestions=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(query){var token,url,result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!window.location.href.startsWith('http://localhost')){_context.next=2;break;}return _context.abrupt(\"return\",[{city:'Munich',country:'de',localized_country_name:'Germany',name_string:'Munich, Germany',zip:'meetup3',lat:48.14,lon:11.58},{city:'Munich',country:'us',localized_country_name:'USA',state:'ND',name_string:'Munich, North Dakota, USA',zip:'58352',lat:48.66,lon:-98.85}]);case 2:_context.next=4;return getAccessToken();case 4:token=_context.sent;if(!token){_context.next=11;break;}url='https://api.meetup.com/find/locations?&sign=true&photo-host=public&query='+query+'&access_token='+token;_context.next=9;return axios.get(url);case 9:result=_context.sent;return _context.abrupt(\"return\",result.data);case 11:return _context.abrupt(\"return\",[]);case 12:case\"end\":return _context.stop();}}},_callee);}));return _getSuggestions.apply(this,arguments);}function getEvents(_x2,_x3){return _getEvents.apply(this,arguments);}function _getEvents(){_getEvents=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(lat,lon){var token,url,result;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!window.location.href.startsWith('http://localhost')){_context2.next=2;break;}return _context2.abrupt(\"return\",mockEvents.events);case 2:_context2.next=4;return getAccessToken();case 4:token=_context2.sent;if(!token){_context2.next=12;break;}url='https://api.meetup.com/find/upcoming_events?&sign=true&photo-host=public'+'&access_token='+token;// lat, lon is optional; if you have a lat and lon, you can add them\nif(lat&&lon){url+='&lat='+lat+'&lon='+lon;}_context2.next=10;return axios.get(url);case 10:result=_context2.sent;return _context2.abrupt(\"return\",result.data.events);case 12:case\"end\":return _context2.stop();}}},_callee2);}));return _getEvents.apply(this,arguments);}function getOrRenewAccessToken(_x4,_x5){return _getOrRenewAccessToken.apply(this,arguments);}function _getOrRenewAccessToken(){_getOrRenewAccessToken=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(type,key){var url,tokenInfo;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(type==='get'){// Lambda endpoint to get token by code\nurl='https://0vj8yny5ze.execute-api.eu-central-1.amazonaws.com/dev/api/token/'+key;}else if(type==='renew'){// Lambda endpoint to get token by refresh_token\nurl='https://0vj8yny5ze.execute-api.eu-central-1.amazonaws.com/dev/api/refresh/'+key;}// Use Axios to make a GET request to the endpoint\n_context3.next=3;return axios.get(url);case 3:tokenInfo=_context3.sent;// Save tokens to localStorage together with a timestamp\nlocalStorage.setItem('access_token',tokenInfo.data.access_token);localStorage.setItem('refresh_token',tokenInfo.data.refresh_token);localStorage.setItem('last_saved_time',Date.now());// Return the access_token\nreturn _context3.abrupt(\"return\",tokenInfo.data.access_token);case 8:case\"end\":return _context3.stop();}}},_callee3);}));return _getOrRenewAccessToken.apply(this,arguments);}function getAccessToken(){return _getAccessToken.apply(this,arguments);}function _getAccessToken(){_getAccessToken=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var accessToken,searchParams,code,lastSavedTime,refreshToken;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:accessToken=localStorage.getItem('access_token');if(accessToken){_context4.next=8;break;}searchParams=new URLSearchParams(window.location.search);code=searchParams.get('code');if(code){_context4.next=7;break;}window.location.href='https://secure.meetup.com/oauth2/authorize?client_id=devdka9vqbs3orgak8g9s39jg7&response_type=code&redirect_uri=https://bowlofsunshine.github.io/meetup/';return _context4.abrupt(\"return\",null);case 7:return _context4.abrupt(\"return\",getOrRenewAccessCode('get',code));case 8:lastSavedTime=localStorage.getItem('last_saved_time');if(!(accessToken&&Date.now()-lastSavedTime<3600000)){_context4.next=11;break;}return _context4.abrupt(\"return\",accessToken);case 11:// If the access_token is expired, we try to renew it by using refresh_token\nrefreshToken=localStorage.getItem('refresh_token');return _context4.abrupt(\"return\",getOrRenewAccessToken('renew',refreshToken));case 13:case\"end\":return _context4.stop();}}},_callee4);}));return _getAccessToken.apply(this,arguments);}export{getSuggestions,getEvents};","map":{"version":3,"sources":["/Users/rachel/meetup/meetup/src/api.js"],"names":["mockEvents","axios","getSuggestions","query","window","location","href","startsWith","city","country","localized_country_name","name_string","zip","lat","lon","state","getAccessToken","token","url","get","result","data","getEvents","events","getOrRenewAccessToken","type","key","tokenInfo","localStorage","setItem","access_token","refresh_token","Date","now","accessToken","getItem","searchParams","URLSearchParams","search","code","getOrRenewAccessCode","lastSavedTime","refreshToken"],"mappings":"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","sourcesContent":["import { mockEvents } from './mock-events';\nimport axios from 'axios';\n\nasync function getSuggestions(query) {\n    if (window.location.href.startsWith('http://localhost')) {\n        return [\n            {\n                city: 'Munich',\n                country: 'de',\n                localized_country_name: 'Germany',\n                name_string: 'Munich, Germany',\n                zip: 'meetup3',\n                lat: 48.14,\n                lon: 11.58\n            },\n            {\n                city: 'Munich',\n                country: 'us',\n                localized_country_name: 'USA',\n                state: 'ND',\n                name_string: 'Munich, North Dakota, USA',\n                zip: '58352',\n                lat: 48.66,\n                lon: -98.85\n            }\n        ];\n    }\n\n    const token = await getAccessToken();\n    if (token) {\n        const url = 'https://api.meetup.com/find/locations?&sign=true&photo-host=public&query='\n            + query\n            + '&access_token=' + token;\n        const result = await axios.get(url);\n        return result.data;\n    }\n    return [];\n}\n\nasync function getEvents(lat, lon) {\n    if (window.location.href.startsWith('http://localhost')) {\n        return mockEvents.events;\n    }\n    const token = await getAccessToken();\n    if (token) {\n        let url = 'https://api.meetup.com/find/upcoming_events?&sign=true&photo-host=public'\n            + '&access_token=' + token;\n        // lat, lon is optional; if you have a lat and lon, you can add them\n        if (lat && lon) {\n            url += '&lat=' + lat + '&lon=' + lon;\n        }\n        const result = await axios.get(url);\n        return result.data.events;\n    }\n}\n\nasync function getOrRenewAccessToken(type, key) {\n    let url;\n    if (type === 'get') {\n        // Lambda endpoint to get token by code\n        url = 'https://0vj8yny5ze.execute-api.eu-central-1.amazonaws.com/dev/api/token/'\n            + key;\n    } else if (type === 'renew') {\n        // Lambda endpoint to get token by refresh_token\n        url = 'https://0vj8yny5ze.execute-api.eu-central-1.amazonaws.com/dev/api/refresh/'\n            + key;\n    }\n\n    // Use Axios to make a GET request to the endpoint\n    const tokenInfo = await axios.get(url);\n\n    // Save tokens to localStorage together with a timestamp\n    localStorage.setItem('access_token', tokenInfo.data.access_token);\n    localStorage.setItem('refresh_token', tokenInfo.data.refresh_token);\n    localStorage.setItem('last_saved_time', Date.now());\n\n    // Return the access_token\n    return tokenInfo.data.access_token;\n}\n\nasync function getAccessToken() {\n    const accessToken = localStorage.getItem('access_token');\n    if (!accessToken) {\n        const searchParams = new URLSearchParams(window.location.search);\n        const code = searchParams.get('code');\n\n        if (!code) {\n            window.location.href = 'https://secure.meetup.com/oauth2/authorize?client_id=devdka9vqbs3orgak8g9s39jg7&response_type=code&redirect_uri=https://bowlofsunshine.github.io/meetup/';\n            return null;\n        }\n        return getOrRenewAccessCode('get', code);\n    }\n    const lastSavedTime = localStorage.getItem('last_saved_time');\n\n    if (accessToken && (Date.now() - lastSavedTime < 3600000)) {\n        return accessToken;\n    }\n    // If the access_token is expired, we try to renew it by using refresh_token\n    const refreshToken = localStorage.getItem('refresh_token');\n    return getOrRenewAccessToken('renew', refreshToken);\n}\n\nexport { getSuggestions, getEvents };"]},"metadata":{},"sourceType":"module"}