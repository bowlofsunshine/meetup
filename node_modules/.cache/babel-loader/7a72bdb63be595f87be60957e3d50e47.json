{"ast":null,"code":"import { mockEvents } from './mock-events';\nimport axios from 'axios';\n\nasync function getSuggestions(query) {\n  if (window.location.href.startsWith('http://localhost')) {\n    return [{\n      city: 'Munich',\n      country: 'de',\n      localized_country_name: 'Germany',\n      name_string: 'Munich, Germany',\n      zip: 'meetup3',\n      lat: 48.14,\n      lon: 11.58\n    }, {\n      city: 'Munich',\n      country: 'us',\n      localized_country_name: 'USA',\n      state: 'ND',\n      name_string: 'Munich, North Dakota, USA',\n      zip: '58352',\n      lat: 48.66,\n      lon: -98.85\n    }];\n  }\n\n  const token = await getAccessToken();\n\n  if (token) {\n    const url = 'https://api.meetup.com/find/locations?&sign=true&photo-host=public&query=' + query + '&access_token=' + token;\n    const result = await axios.get(url);\n    return result.data;\n  }\n\n  return [];\n}\n\nasync function getEvents(lat, lon, page) {\n  if (window.location.href.startsWith('http://localhost')) {\n    return mockEvents.events;\n  }\n\n  const token = await getAccessToken();\n\n  if (token) {\n    let url = 'https://api.meetup.com/find/upcoming_events?&sign=true&photo-host=public' + '&access_token=' + token; // lat, lon is optional, if we have lat and lon, then we can add them\n\n    if (lat && lon) {\n      url += '&lat=' + lat + '&lon=' + lon;\n    }\n\n    if (page) {\n      url += '&page=' + page;\n    }\n\n    const result = await axios.get(url);\n    const events = result.data.events;\n\n    if (events.length) {\n      localStorage.setItem('lastEvents', JSON.stringify(events));\n    }\n\n    return events;\n  }\n\n  return [];\n}\n\nasync function getOrRenewAccessToken(type, key) {\n  let url;\n\n  if (type === 'get') {\n    // Lambda endpoint to get token by code\n    url = 'https://0vj8yny5ze.execute-api.eu-central-1.amazonaws.com/dev/api/token/' + key;\n  } else if (type === 'renew') {\n    // Lambda endpoint to get token by refresh_token\n    url = 'https://0vj8yny5ze.execute-api.eu-central-1.amazonaws.com/dev/api/refresh/' + key;\n  } // Use Axios to make a GET request to the endpoint\n\n\n  const tokenInfo = await axios.get(url); // Save tokens to localStorage together with a timestamp\n\n  localStorage.setItem('access_token', tokenInfo.data.access_token);\n  localStorage.setItem('refresh_token', tokenInfo.data.refresh_token);\n  localStorage.setItem('last_saved_time', Date.now()); // Return the access_token\n\n  return tokenInfo.data.access_token;\n}\n\nasync function getAccessToken() {\n  const accessToken = localStorage.getItem('access_token');\n\n  if (!accessToken) {\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = searchParams.get('code');\n\n    if (!code) {\n      window.location.href = 'https://secure.meetup.com/oauth2/authorize?client_id=devdka9vqbs3orgak8g9s39jg7&response_type=code&redirect_uri=https://bowlofsunshine.github.io/meetup/';\n      return null;\n    }\n\n    return getOrRenewAccessToken('get', code);\n  }\n\n  const lastSavedTime = localStorage.getItem('last_saved_time');\n\n  if (accessToken && Date.now() - lastSavedTime < 3600000) {\n    return accessToken;\n  } // If the access_token is expired, we try to renew it by using refresh_token\n\n\n  const refreshToken = localStorage.getItem('refresh_token');\n  return getOrRenewAccessToken('renew', refreshToken);\n}\n\nexport { getSuggestions, getEvents };","map":{"version":3,"sources":["/Users/rachel/meetup/meetup/src/api.js"],"names":["mockEvents","axios","getSuggestions","query","window","location","href","startsWith","city","country","localized_country_name","name_string","zip","lat","lon","state","token","getAccessToken","url","result","get","data","getEvents","page","events","length","localStorage","setItem","JSON","stringify","getOrRenewAccessToken","type","key","tokenInfo","access_token","refresh_token","Date","now","accessToken","getItem","searchParams","URLSearchParams","search","code","lastSavedTime","refreshToken"],"mappings":"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","sourcesContent":["import { mockEvents } from './mock-events';\nimport axios from 'axios';\n\nasync function getSuggestions(query) {\n    if (window.location.href.startsWith('http://localhost')) {\n        return [\n            {\n                city: 'Munich',\n                country: 'de',\n                localized_country_name: 'Germany',\n                name_string: 'Munich, Germany',\n                zip: 'meetup3',\n                lat: 48.14,\n                lon: 11.58\n            },\n            {\n                city: 'Munich',\n                country: 'us',\n                localized_country_name: 'USA',\n                state: 'ND',\n                name_string: 'Munich, North Dakota, USA',\n                zip: '58352',\n                lat: 48.66,\n                lon: -98.85\n            }\n        ];\n    }\n\n    const token = await getAccessToken();\n    if (token) {\n        const url = 'https://api.meetup.com/find/locations?&sign=true&photo-host=public&query='\n            + query\n            + '&access_token=' + token;\n        const result = await axios.get(url);\n        return result.data;\n    }\n    return [];\n}\n\nasync function getEvents(lat, lon, page) {\n    if (window.location.href.startsWith('http://localhost')) {\n        return mockEvents.events;\n    }\n\n    const token = await getAccessToken();\n    if (token) {\n        let url = 'https://api.meetup.com/find/upcoming_events?&sign=true&photo-host=public'\n            + '&access_token=' + token;\n        // lat, lon is optional, if we have lat and lon, then we can add them\n        if (lat && lon) {\n            url += '&lat=' + lat + '&lon=' + lon;\n        }\n        if (page) {\n            url += '&page=' + page;\n        }\n        const result = await axios.get(url);\n        const events = result.data.events;\n        if (events.length) {\n            localStorage.setItem('lastEvents', JSON.stringify(events));\n        }\n\n        return events;\n    }\n    return [];\n}\n\n\nasync function getOrRenewAccessToken(type, key) {\n    let url;\n    if (type === 'get') {\n        // Lambda endpoint to get token by code\n        url = 'https://0vj8yny5ze.execute-api.eu-central-1.amazonaws.com/dev/api/token/'\n            + key;\n    } else if (type === 'renew') {\n        // Lambda endpoint to get token by refresh_token\n        url = 'https://0vj8yny5ze.execute-api.eu-central-1.amazonaws.com/dev/api/refresh/'\n            + key;\n    }\n\n    // Use Axios to make a GET request to the endpoint\n    const tokenInfo = await axios.get(url);\n\n    // Save tokens to localStorage together with a timestamp\n    localStorage.setItem('access_token', tokenInfo.data.access_token);\n    localStorage.setItem('refresh_token', tokenInfo.data.refresh_token);\n    localStorage.setItem('last_saved_time', Date.now());\n\n    // Return the access_token\n    return tokenInfo.data.access_token;\n}\n\nasync function getAccessToken() {\n    const accessToken = localStorage.getItem('access_token');\n    if (!accessToken) {\n        const searchParams = new URLSearchParams(window.location.search);\n        const code = searchParams.get('code');\n\n        if (!code) {\n            window.location.href = 'https://secure.meetup.com/oauth2/authorize?client_id=devdka9vqbs3orgak8g9s39jg7&response_type=code&redirect_uri=https://bowlofsunshine.github.io/meetup/';\n            return null;\n        }\n        return getOrRenewAccessToken('get', code);\n    }\n    const lastSavedTime = localStorage.getItem('last_saved_time');\n\n    if (accessToken && (Date.now() - lastSavedTime < 3600000)) {\n        return accessToken;\n    }\n    // If the access_token is expired, we try to renew it by using refresh_token\n    const refreshToken = localStorage.getItem('refresh_token');\n    return getOrRenewAccessToken('renew', refreshToken);\n}\n\n\n\nexport { getSuggestions, getEvents };"]},"metadata":{},"sourceType":"module"}